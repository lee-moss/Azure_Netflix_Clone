trigger: none

pr:
  branches:
    include:
      - main
  paths:
    include:
      - '**/*.tf'
      - '**/*.tfvars'
      - 'azure-pipelines.yml'

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: netflix-variables
  - name: TF_STATE_RG
    value: 'NetflixProject'
  - name: TF_STATE_STORAGE
    value: 'netflixstatefile'
  - name: TF_STATE_CONTAINER
    value: 'tfstate'

stages:
  - stage: Analysis
    displayName: 'Code Analysis'
    jobs:
      - job: CodeAnalysis
        steps:
          - checkout: self
            fetchDepth: 0
            
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'SonarCloud'
              organization: 'lam5'
              scannerMode: 'CLI'
              configMode: 'file'
              extraProperties: |
                sonar.qualitygate.wait=false
                sonar.qualitygate.timeout=300
                sonar.branch.name=$(Build.SourceBranchName)

          - task: SonarCloudAnalyze@1
            displayName: 'Run Analysis'
            continueOnError: true

  - stage: Import
    displayName: 'Import Resources'
    dependsOn: Analysis
    condition: succeeded('Analysis')
    jobs:
      - job: ImportResources
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'devOps-connection'
              backendAzureRmResourceGroupName: '$(TF_STATE_RG)'
              backendAzureRmStorageAccountName: '$(TF_STATE_STORAGE)'
              backendAzureRmContainerName: '$(TF_STATE_CONTAINER)'
              backendAzureRmKey: 'netflix.tfstate'

          - task: PowerShell@2
            displayName: 'Import Resource Group'
            inputs:
              targetType: 'inline'
              script: |
                terraform import `
                  -var="admin_username=adminuser" `
                  -var="admin_password=$(admin_password)" `
                  -var="key_vault_name=$(key_vault_name)" `
                  -var="key_vault_rg=$(key_vault_rg)" `
                  -var="admin_username_secret=vm-admin-username" `
                  -var="admin_password_secret=vm-password" `
                  azurerm_resource_group.netflix `
                  /subscriptions/488dbdc5-85c6-402d-811f-eb47d17f391f/resourceGroups/Azure-Netflix-Clone

  - stage: Validate
    displayName: 'Validate and Plan'
    dependsOn: Import
    condition: succeeded('Import')
    jobs:
      - job: ValidateAndPlan
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'devOps-connection'
              backendAzureRmResourceGroupName: '$(TF_STATE_RG)'
              backendAzureRmStorageAccountName: '$(TF_STATE_STORAGE)'
              backendAzureRmContainerName: '$(TF_STATE_CONTAINER)'
              backendAzureRmKey: 'netflix.tfstate'
              commandOptions: '-upgrade'

          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'devOps-connection'
              commandOptions: '-var="admin_username=adminuser" -var="admin_password=$(admin_password)" -var="key_vault_name=$(key_vault_name)" -var="key_vault_rg=$(key_vault_rg)" -var="admin_username_secret=vm-admin-username" -var="admin_password_secret=vm-password"'

  - stage: Deploy
    displayName: 'Deploy Infrastructure'
    dependsOn: Validate
    condition: succeeded('Validate')
    jobs:
      - job: Apply
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'devOps-connection'
              backendAzureRmResourceGroupName: '$(TF_STATE_RG)'
              backendAzureRmStorageAccountName: '$(TF_STATE_STORAGE)'
              backendAzureRmContainerName: '$(TF_STATE_CONTAINER)'
              backendAzureRmKey: 'netflix.tfstate'
              commandOptions: '-upgrade'

          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'devOps-connection'
              commandOptions: '-var="admin_username=adminuser" -var="admin_password=$(admin_password)" -var="key_vault_name=$(key_vault_name)" -var="key_vault_rg=$(key_vault_rg)" -var="admin_username_secret=vm-admin-username" -var="admin_password_secret=vm-password"'

